// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum language {
  fr
  en
}

enum theme {
  light
  dark
}

model User {
  id                String         @id @default(uuid())
  oauthId           String         @unique
  profilePic       String?
  fullname          String
  description       String?
  linkedinLink      String?
  githubLink        String?
  otherLink         String?
  myPosts           Post[]
  favPosts          Post[]         @relation("PostFavorites")
  comments          Comment[]
  commentsUpLikes   Comment[]      @relation("CommentUpLikes")
  commentsDownLikes Comment[]      @relation("CommentDownLikes")
  notifications     Notification[]
  createdAt         DateTime       @default(now())
  language          language       @default(fr)
  theme             theme          @default(light)
}

enum JobType {
  INTERNSHIP
  APPRENTICESHIP
  FULLTIME
  PARTTIME
  FREELANCE
}

enum ExprerienceLevel {
  ENTRY_LEVEL
  JUNIOR
  MID
  SENIOR
}

model Post {
  id                String           @id @default(uuid())
  title             String
  description       String
  jobType           JobType
  experienceLevel   ExprerienceLevel
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  author            User             @relation(fields: [authorId], references: [id])
  authorId          String
  archived          Boolean          @default(false)
  favByUsers        User[]           @relation("PostFavorites")
  totalFav          Int              @default(0)
  comments          Comment[]
  resumePath        String?
}

model Comment {
  id             String   @id @default(uuid())
  content        String
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String
  post           Post     @relation(fields: [postId], references: [id])
  postId         String
  totalUpLikes   Int      @default(0)
  totalDownLikes Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  upLikes        User[]   @relation("CommentUpLikes")
  downLikes      User[]   @relation("CommentDownLikes")
}

model Notification {
  id         String   @id @default(uuid())
  content    String
  receiver   User     @relation(fields: [receiverId], references: [id])
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
